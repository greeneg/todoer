basePath: /api/v1
definitions:
  controllers.SafeUser:
    properties:
      Id:
        type: integer
      creationDate:
        type: string
      userName:
        type: string
    type: object
  model.FailureMsg:
    properties:
      error:
        type: string
    type: object
  model.HealthCheck:
    properties:
      db:
        type: string
      diskSpace:
        type: string
      diskWritable:
        type: string
      health:
        type: string
      status:
        type: integer
    type: object
  model.PasswordChange:
    properties:
      newPassword:
        type: string
      oldPassword:
        type: string
    type: object
  model.ProposedTodo:
    properties:
      description:
        type: string
    type: object
  model.ProposedUser:
    properties:
      Id:
        type: integer
      password:
        type: string
      status:
        type: string
      userName:
        type: string
    type: object
  model.SuccessMsg:
    properties:
      message:
        type: string
    type: object
  model.Todo:
    properties:
      Id:
        type: integer
      creationDate:
        type: string
      description:
        type: string
      status:
        type: string
    type: object
  model.TodoList:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Todo'
        type: array
    type: object
  model.User:
    properties:
      Id:
        type: integer
      creationDate:
        type: string
      fullName:
        type: string
      lastChangedDate:
        type: string
      passwordHash:
        type: string
      status:
        type: string
      userName:
        type: string
    type: object
  model.UserStatusMsg:
    properties:
      message:
        type: string
      userStatus:
        type: string
    type: object
  model.UsersList:
    properties:
      data:
        items:
          $ref: '#/definitions/model.User'
        type: array
    type: object
host: localhost:5000
info:
  contact:
    name: Gary Greene
    url: https://github.com/greeneg/todoer
  description: An API for managing todos
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Todoer
  version: 0.0.1
paths:
  /health:
    get:
      description: Retrieve overall health of the service
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HealthCheck'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HealthCheck'
      summary: Retrieve overall health of the service
      tags:
      - serviceHealth
  /todo:
    get:
      description: Retrieve list of all todos
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TodoList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve list of todos
      tags:
      - todo
    post:
      consumes:
      - application/json
      description: Add a new todo
      parameters:
      - description: Todo Data
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/model.ProposedTodo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Register todo
      tags:
      - todo
  /todo/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a todo
      parameters:
      - description: Todo Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Delete todo
      tags:
      - todo
    get:
      description: Retrieve a todo by its Id
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Todo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve a todo by its Id
      tags:
      - todo
  /todo/{id}/{status}:
    put:
      consumes:
      - application/json
      description: Updates the status field of a todo
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      - description: Todo Status
        in: path
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Update the status of a todo
      tags:
      - todo
  /user:
    post:
      consumes:
      - application/json
      description: Add a new user
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.ProposedUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Register user
      tags:
      - user
  /user/{name}:
    delete:
      consumes:
      - application/json
      description: Delete a user
      parameters:
      - description: User name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Delete user
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: Change password
      parameters:
      - description: User name
        in: path
        name: name
        required: true
        type: string
      - description: Password data
        in: body
        name: changePassword
        required: true
        schema:
          $ref: '#/definitions/model.PasswordChange'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Change password
      tags:
      - user
  /user/{name}/status:
    get:
      consumes:
      - application/json
      description: Retrieve a user's active status
      parameters:
      - description: User name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserStatusMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve a user's active status. Can be either 'enabled' or 'locked'
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: Set a user's active status
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      - description: User name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserStatusMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Set a user's active status. Can be either 'enabled' or 'locked'
      tags:
      - user
  /user/id/{id}:
    get:
      description: Retrieve a user by their Id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.SafeUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve a user by their Id
      tags:
      - user
  /user/name/{name}:
    get:
      description: Retrieve a user by their UserName
      parameters:
      - description: User name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.SafeUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve a user by their UserName
      tags:
      - user
  /users:
    get:
      description: Retrieve list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UsersList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.FailureMsg'
      security:
      - BasicAuth: []
      summary: Retrieve list of all users
      tags:
      - user
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
